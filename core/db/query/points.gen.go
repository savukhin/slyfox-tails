// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"slyfox-tails/db/models"
)

func newPoint(db *gorm.DB, opts ...gen.DOOption) point {
	_point := point{}

	_point.pointDo.UseDB(db, opts...)
	_point.pointDo.UseModel(&models.Point{})

	tableName := _point.pointDo.TableName()
	_point.ALL = field.NewAsterisk(tableName)
	_point.ID = field.NewUint64(tableName, "id")
	_point.Title = field.NewString(tableName, "title")
	_point.CreatorID = field.NewUint64(tableName, "creator_id")
	_point.CreatedAt = field.NewTime(tableName, "created_at")
	_point.UpdatedAt = field.NewTime(tableName, "updated_at")
	_point.DeletedAt = field.NewField(tableName, "deleted_attt")
	_point.Stages = pointManyToManyStages{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Stages", "models.Stage"),
		Points: struct {
			field.RelationField
			Stages struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Stages.Points", "models.Point"),
			Stages: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Stages.Points.Stages", "models.Stage"),
			},
		},
	}

	_point.fillFieldMap()

	return _point
}

type point struct {
	pointDo

	ALL       field.Asterisk
	ID        field.Uint64
	Title     field.String
	CreatorID field.Uint64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Stages    pointManyToManyStages

	fieldMap map[string]field.Expr
}

func (p point) Table(newTableName string) *point {
	p.pointDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p point) As(alias string) *point {
	p.pointDo.DO = *(p.pointDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *point) updateTableName(table string) *point {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint64(table, "id")
	p.Title = field.NewString(table, "title")
	p.CreatorID = field.NewUint64(table, "creator_id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_attt")

	p.fillFieldMap()

	return p
}

func (p *point) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *point) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["creator_id"] = p.CreatorID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_attt"] = p.DeletedAt

}

func (p point) clone(db *gorm.DB) point {
	p.pointDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p point) replaceDB(db *gorm.DB) point {
	p.pointDo.ReplaceDB(db)
	return p
}

type pointManyToManyStages struct {
	db *gorm.DB

	field.RelationField

	Points struct {
		field.RelationField
		Stages struct {
			field.RelationField
		}
	}
}

func (a pointManyToManyStages) Where(conds ...field.Expr) *pointManyToManyStages {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pointManyToManyStages) WithContext(ctx context.Context) *pointManyToManyStages {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pointManyToManyStages) Session(session *gorm.Session) *pointManyToManyStages {
	a.db = a.db.Session(session)
	return &a
}

func (a pointManyToManyStages) Model(m *models.Point) *pointManyToManyStagesTx {
	return &pointManyToManyStagesTx{a.db.Model(m).Association(a.Name())}
}

type pointManyToManyStagesTx struct{ tx *gorm.Association }

func (a pointManyToManyStagesTx) Find() (result []*models.Stage, err error) {
	return result, a.tx.Find(&result)
}

func (a pointManyToManyStagesTx) Append(values ...*models.Stage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pointManyToManyStagesTx) Replace(values ...*models.Stage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pointManyToManyStagesTx) Delete(values ...*models.Stage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pointManyToManyStagesTx) Clear() error {
	return a.tx.Clear()
}

func (a pointManyToManyStagesTx) Count() int64 {
	return a.tx.Count()
}

type pointDo struct{ gen.DO }

type IPointDo interface {
	gen.SubQuery
	Debug() IPointDo
	WithContext(ctx context.Context) IPointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPointDo
	WriteDB() IPointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPointDo
	Not(conds ...gen.Condition) IPointDo
	Or(conds ...gen.Condition) IPointDo
	Select(conds ...field.Expr) IPointDo
	Where(conds ...gen.Condition) IPointDo
	Order(conds ...field.Expr) IPointDo
	Distinct(cols ...field.Expr) IPointDo
	Omit(cols ...field.Expr) IPointDo
	Join(table schema.Tabler, on ...field.Expr) IPointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPointDo
	Group(cols ...field.Expr) IPointDo
	Having(conds ...gen.Condition) IPointDo
	Limit(limit int) IPointDo
	Offset(offset int) IPointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPointDo
	Unscoped() IPointDo
	Create(values ...*models.Point) error
	CreateInBatches(values []*models.Point, batchSize int) error
	Save(values ...*models.Point) error
	First() (*models.Point, error)
	Take() (*models.Point, error)
	Last() (*models.Point, error)
	Find() ([]*models.Point, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Point, err error)
	FindInBatches(result *[]*models.Point, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Point) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPointDo
	Assign(attrs ...field.AssignExpr) IPointDo
	Joins(fields ...field.RelationField) IPointDo
	Preload(fields ...field.RelationField) IPointDo
	FirstOrInit() (*models.Point, error)
	FirstOrCreate() (*models.Point, error)
	FindByPage(offset int, limit int) (result []*models.Point, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pointDo) Debug() IPointDo {
	return p.withDO(p.DO.Debug())
}

func (p pointDo) WithContext(ctx context.Context) IPointDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pointDo) ReadDB() IPointDo {
	return p.Clauses(dbresolver.Read)
}

func (p pointDo) WriteDB() IPointDo {
	return p.Clauses(dbresolver.Write)
}

func (p pointDo) Session(config *gorm.Session) IPointDo {
	return p.withDO(p.DO.Session(config))
}

func (p pointDo) Clauses(conds ...clause.Expression) IPointDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pointDo) Returning(value interface{}, columns ...string) IPointDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pointDo) Not(conds ...gen.Condition) IPointDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pointDo) Or(conds ...gen.Condition) IPointDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pointDo) Select(conds ...field.Expr) IPointDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pointDo) Where(conds ...gen.Condition) IPointDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPointDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pointDo) Order(conds ...field.Expr) IPointDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pointDo) Distinct(cols ...field.Expr) IPointDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pointDo) Omit(cols ...field.Expr) IPointDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pointDo) Join(table schema.Tabler, on ...field.Expr) IPointDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPointDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pointDo) RightJoin(table schema.Tabler, on ...field.Expr) IPointDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pointDo) Group(cols ...field.Expr) IPointDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pointDo) Having(conds ...gen.Condition) IPointDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pointDo) Limit(limit int) IPointDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pointDo) Offset(offset int) IPointDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPointDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pointDo) Unscoped() IPointDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pointDo) Create(values ...*models.Point) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pointDo) CreateInBatches(values []*models.Point, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pointDo) Save(values ...*models.Point) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pointDo) First() (*models.Point, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Point), nil
	}
}

func (p pointDo) Take() (*models.Point, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Point), nil
	}
}

func (p pointDo) Last() (*models.Point, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Point), nil
	}
}

func (p pointDo) Find() ([]*models.Point, error) {
	result, err := p.DO.Find()
	return result.([]*models.Point), err
}

func (p pointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Point, err error) {
	buf := make([]*models.Point, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pointDo) FindInBatches(result *[]*models.Point, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pointDo) Attrs(attrs ...field.AssignExpr) IPointDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pointDo) Assign(attrs ...field.AssignExpr) IPointDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pointDo) Joins(fields ...field.RelationField) IPointDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pointDo) Preload(fields ...field.RelationField) IPointDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pointDo) FirstOrInit() (*models.Point, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Point), nil
	}
}

func (p pointDo) FirstOrCreate() (*models.Point, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Point), nil
	}
}

func (p pointDo) FindByPage(offset int, limit int) (result []*models.Point, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pointDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pointDo) Delete(models ...*models.Point) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pointDo) withDO(do gen.Dao) *pointDo {
	p.DO = *do.(*gen.DO)
	return p
}
